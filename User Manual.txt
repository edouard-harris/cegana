CEGANA User ManualOur Bayesian algorithm, specifically its logistic growth implementation given in Eq. (V.3), has been implemented in an open-source Python program named CEll Growth ANAlyzer (CEGANA) 1.2.  CEGANA 1.2 is released into the public domain under the terms of the Free Software FoundationÕs GNU Lesser General Public License (LGPL), which authorizes the use, copying, distribution, and modification of the program, provided that the modified or altered source code is made publicly available under the same terms.  A copy of the LGPL is included with the software for reference.  What follows is a brief description of CEGANAÕs identified system requirements, as well as a condensed user guide.  Note that additional explanations are also available as comments interlaced with the source code.System requirements
CEGANA is a Python program that is known to run stably on OSX 10.6 (Snow Leopard), though it incorporates no Mac-specific dependencies and should be largely platform-independent.  It does require Python 2.x to run successfully, due to the lack of backward compatibility between Python 3 and the languageÕs previous versions.  It also requires the third-party modules numpy (Numeric Python, v1.8.0), scipy (Scientific Python, v0.13.2) and matplotlib (library of mathematical plotting tools, v1.3.1).  CEGANA need not be compiled, and can run successfully as a script through the IPython shell in the command line.  The use of IPython (v0.13) is recommended, but may not be necessary.How to begin

CEGANA is distributed as a zip archive of size approximately 2 MB when uncompressed.  To run CEGANA in an OSX or Linux environment, simply uncompress the archive, and move the resulting parent folder (named ÒCegana 1.2Ó) into the directory of your choice.  Do not change the names of the two sub-folders ÒDatasetsÓ, or ÒSaved DistributionsÓ, as certain functions of CEGANA may be disabled by such changes.

Open the command shell (Terminal in OSX).  Ensure that your shell is localized inside the parent folder ÒCegana 1.2Ó, using the cd command.  To run CEGANA through IPython, type$ ipython Ði CEGANA_1.2.pyat the prompt; to run CEGANA through the native OSX Python interpreter, type$ python Ði CEGANA_1.2.pyat the prompt.Processing a dataset
Datasets are processed using the function cegana_main().  This function is called in the following way:>>> distribution = cegana_main(data_file,gridpoints,rmin,rmax,Kmin,Kmax,alphamin,alphamax)This analyzes a dataset according to the inference formula in Eq. S36, and assigns the resulting output probability density to the variable distribution, which may, of course, be given any desired name.  The arguments of the function are as follows:data_file - This variable is a string giving the name of the document containing the dataset to be analyzed.  This document should be saved in the sub-folder ÒDatasetsÓ.  It should be formatted into rows and columns, with the columns separated from each other by white space.  The first row should contain column headings, and is skipped by CEGANA.  Each subsequent row should refer to a single cell population that has been seeded and counted.  The first column gives the time interval, in hours, between the seeding of a cell population and the counting of its sample (for example, if a cell population were seeded at time 0 and counted 12 hours later, this entry should read Ò12Ó).  The second column gives the number of cells that were seeded at time 0.  The third column gives the fraction of the seeding flask that was used to seed that population (for example, if a flask containing 10 million cells was used to seed a population of 200 000 cells at time 0, this entry should read Ò0.02Ó).  The fourth column gives the number of cells that were counted in the sample.  Finally, the fifth column gives the fraction of the population that was sampled for counting.  For example, if a flask containing 10 million cells was used to seed a population of 200 000 cells in a well at time 0, and, 12 hours later, 10% (or 0.1) of the volume of that well was drawn up and found to contain exactly 346 275 cells, then the columns in the data file would read
	12	200000	0.02	346275	0.1

A template data file, in the required format, is included as part of CEGANA 1.2Õs release.  It is located in the folder ÒDatasetsÓ, and named ÒEXAMPLE DATASETÓ.
gridpoints - This variable is an integer that gives the resolution of the parameter space search that is to be undertaken by CEGANA.  The time required for CEGANA to complete a search is proportional to the cube of this variable, since the logistic model equation includes three parameters: the growth rate, carrying capacity, and extrinsic error.  The recommended value for this variable is 10, but it may be set as low as 8 if speed is considered important, or as high as 30 if professional-quality figures are desired.
rmin - The lower bound of growth rate to be included in CEGANAÕs parameter search.  If none is known, this should be set at 0.
rmax - The upper bound of growth rate to be included in CEGANAÕs parameter search.  If none is known, this should be set at a value that is almost certain to be greater than the actual growth rate of the cells being investigated.
Kmin - The lower bound of carrying capacity to be included in CEGANAÕs parameter search.  If none is known, this may be set at 0.
Kmax - The upper bound of carrying capacity to be included in CEGANAÕs parameter search.  If none is known, this should be set at a value that is almost certain to be greater than the actual carrying capacity of the well or container being used in the experiment.
alphamin - The lower bound of extrinsic error to be included in CEGANAÕs parameter search.  If none is known, this may be set at 0.
alphamax - The upper bound of extrinsic to be included in CEGANAÕs parameter search.  If none is known, this should be set at a value that is almost certain to be greater than the actual extrinsic error incurred in the experiment.The cegana_main() function may be tested using the ÒEXAMPLE DATASETÓ file found in the folder ÒDatasetsÓ (this is our OVCAR5 dataset from Fig. S5).  To do this, run the following code:>>> data_file = ÔEXAMPLE DATASET.txtÕ>>> gridpoints = 10>>> rmin = 0.062>>> rmax = 0.078>>> Kmin = 7.7e6>>> Kmax = 9.4e6>>> alphamin = 0.04>>> alphamax = 0.16>>> distribution = cegana_main(data_file,gridpoints,rmin,rmax,Kmin,Kmax,alphamin,alphamax)The analysis of this sample dataset should take somewhat less than 5 minutes to complete.  The result will be stored in the variable distribution.Saving and loading distributions
Once CEGANA has analyzed a dataset, it produces as output a self-contained collection of parameters and probabilities that we will collectively refer to as a distribution.  These distributions can be saved and loaded for later viewing.  Suppose that, following the analysis of a dataset, you have obtained a distribution that has the variable name distribution.  To save this distribution under the name ÒMyDistributionÓ, you may use the function save_distribution().  This function is called as follows:>>> file_name = ÔMyDistributionÕ>>> save_distribution(distribution,file_name)where file_name is the string that gives the name under which the distribution named distribution is to be saved.  

To see, at any given time, a list of all of the distributions that have been saved, you may use the list_saved() function.  This is called as follows:>>> list_saved()Lastly, to load a distribution for viewing or any other purpose, you may use the load_distribution() function.  This is called as follows:>>> distribution = load_distribution(file_name)where file_name is a string variable giving the name of the distribution you would like to load.Visualizing datasets and distributions
CEGANA supports visualization of datasets and distributions in three different ways.  The first is through the visualize() function, which can produce both two-dimensional contour plots and three-dimensional surface plots like those shown in Figs. 1-5 (a), (b), and (c).  This function is called as follows:>>> visualize(distribution,plotr,plotK,plotalpha,contour)The arguments of this function are, in order:
distribution - This is a variable representing a distribution, which may have been either calculated using the cegana_main() function, or loaded using the load_distribution() function.
plotr - This is a Boolean variable that is set to True if it is desired that the growth rate be plotted.  If it is set to False, then the growth rate is not plotted, and the plotted distributions are integrated, or marginalized, over the growth rate.
plotK - This is a Boolean variable that is set to True if it is desired that the carrying capacity be plotted.  If it is set to False, then the carrying capacity is not plotted, and the plotted distributions are integrated, or marginalized, over the carrying capacity.
plotalpha - This is a Boolean variable that is set to True if it is desired that the extrinsic fractional error be plotted.  If it is set to False, then the extrinsic fractional error is not plotted, and the plotted distributions are integrated, or marginalized, over the extrinsic error.

contour - This is a Boolean variable that is set to True if a contour plot is to be displayed.  If False, then a three-dimensional, interactive surface plot is created.CEGANA 1.2Õs release includes a sample distribution, called ÒEXAMPLE DISTRIBUTIONÓ and saved in the ÒSaved DistributionsÓ sub-folder, that can be plotted to test the visualize() function (this is a high-resolution distribution obtained by analysis of OVCAR5, and shown in Figs. 5(a), 5(b), and 5(c)).  To carry out this test, run the following code:>>> distribution = load_distribution(ÔEXAMPLE DISTRIBUTIONÕ)>>> visualize(distribution,True,True,True,True)CEGANA should produce three contour plots: one of r vs. K; one of alpha vs. K; and one of alpha vs. r.  Setting one of the three arguments to False omits the corresponding variable; for example, if plotr is set to False, visualize() will only return a single three-dimensional surface plot, showing alpha vs. K.  If both plotr and plotK are set to False, CEGANA will return a line graph showing the probability distribution for alpha only, marginalized over both r and K.  Three-dimensional surface plots are produced in a similar way, by simply changing the last command in the above test code to

>>> visualize(distribution,True,True,True,False)
The second function available for visualization is the plot_all_fits() function.  This function plots the data points and model equations in the manner shown in Figs. 1(d), 2(d), 3(d), 4(d), and 5(d).  Time is plotted on the x-axis; on the y-axis, we indicate the total number of cells in a population (for example, in a well or dish in which the cells have been growing), normalized to the number seeded.  This normalization is done so that cell populations for which different numbers of cells have been seeded can be visually compared to one another with ease (but note that the experimental results presented in this work all pertain to situations in which the same number of cells was seeded for each population).  In addition to the data, plot_all_fits() plots one model corresponding to each hypothesis included in the input distribution; that is, one model corresponding to each ÒtileÓ in Figs. 1(a), 2(a), 3(a), 4(a), and 5(a), or one model for each pair (r,K) that is considered within the domain of the input distribution.  The darkness of the curve corresponding to each model is proportional to the relative probability of that model.  Model curves that have very low probability appear almost white, so while it may seem as though fewer curves are plotted than there are tiles in Figs. 1(a), 2(a), 3(a), 4(a), and 5(a), this is not actually the case.This visualization function is called as follows:>>> plot_all_fits(data_file,distribution,show_lstsq)The arguments of this function are, in order:
data_file - This variable is a string giving the name of the document containing the dataset to be analyzed.  This document should be saved in the sub-folder ÒDatasetsÓ.  Please refer to the documentation pertaining to the cegana_main() function, above, for a complete description.
distribution - This is a variable representing a distribution, which may have been either calculated using the cegana_main() function, or loaded using the load_distribution() function.
show_lstsq - This is a Boolean variable that allows the user to plot, for comparison, the result of a least-squares regression on the data (if set to True), or to omit such a plot (if set to False).  The default value for this variable is False.  If set to True, the least-squares fit is plotted in red over the model curves whose probabilities have been calculated by CEGANA.The plot_all_fits() function can be tested using the provided sample test dataset and distribution.  To carry out this test, run the following code:>>> data_file = ÔEXAMPLE DATASET.txtÕ>>> distribution = ÔEXAMPLE DISTRIBUTIONÕ>>> plot_all_fits(data_file,distribution,True)The third and final visualization function allows a user to plot the dataset against a logistic curve whose model parameters are chosen independently, without regard to any modeling.  This function is called plot_fit() and is called as>>> plot_fit(data_file,r,K)The inputs are as follows, in order:
data_file - This variable is a string giving the name of the document containing the dataset to be analyzed.  This document should be saved in the sub-folder ÒDatasetsÓ.  Please refer to the documentation pertaining to the cegana_main() function, above, for a complete description.
r - The value of the intrinsic growth rate for the plotted model curve.
K - The value of the carrying capacity for the plotted model curve.This function can be tested as follows, using the sample dataset provided:>>> data_file = ÔEXAMPLE DATASET.txtÕ>>> r = 0.065>>> K = 8.9e6>>> plot_fit(data_file,r,K)Of course, plot_fit() may also be tested with any physically meaningful values of r and K selected by the user.